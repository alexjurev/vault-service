// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAddObjectParams creates a new AddObjectParams object
//
// There are no default values defined in the spec.
func NewAddObjectParams() AddObjectParams {

	return AddObjectParams{}
}

// AddObjectParams contains all the bound params for the add object operation
// typically these are obtained from a http.Request
//
// swagger:parameters AddObject
type AddObjectParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: body
	*/
	Body string
	/*Ключ
	  In: header
	*/
	Expires *int64
	/*Ключ
	  Required: true
	  In: path
	*/
	Key string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewAddObjectParams() beforehand.
func (o *AddObjectParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body string
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("body", "body", ""))
			} else {
				res = append(res, errors.NewParseError("body", "body", "", err))
			}
		} else {
			// no validation required on inline body
			o.Body = body
		}
	} else {
		res = append(res, errors.Required("body", "body", ""))
	}

	if err := o.bindExpires(r.Header[http.CanonicalHeaderKey("expires")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	rKey, rhkKey, _ := route.Params.GetOK("key")
	if err := o.bindKey(rKey, rhkKey, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindExpires binds and validates parameter Expires from header.
func (o *AddObjectParams) bindExpires(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("expires", "header", "int64", raw)
	}
	o.Expires = &value

	return nil
}

// bindKey binds and validates parameter Key from path.
func (o *AddObjectParams) bindKey(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Key = raw

	return nil
}
